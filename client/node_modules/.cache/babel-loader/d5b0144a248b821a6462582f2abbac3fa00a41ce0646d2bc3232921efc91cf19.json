{"ast":null,"code":"// server/routes/auth.js\nconst express = require('express');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst db = require('../config/db');\nconst router = express.Router();\n\n// Login Route\nrouter.post('/login', async (req, res) => {\n  const {\n    email,\n    password,\n    role\n  } = req.body;\n\n  // Validate request body\n  if (!email || !password || !role) {\n    return res.status(400).json({\n      error: 'Email, password, and role are required'\n    });\n  }\n  try {\n    // Determine which table to query based on role\n    let table;\n    if (role === 'student') table = 'student';else if (role === 'advisor') table = 'advisor';else if (role === 'warden') table = 'warden';else return res.status(400).json({\n      error: 'Invalid role'\n    });\n\n    // Query the user by email\n    const [users] = await db.query(`SELECT * FROM ${table} WHERE email = ?`, [email]);\n    if (users.length === 0) {\n      return res.status(400).json({\n        error: 'User not found'\n      });\n    }\n    const user = users[0];\n\n    // Check if the role matches\n    if (user.role !== role) {\n      return res.status(400).json({\n        error: `Role mismatch: expected ${role}, but user is ${user.role}`\n      });\n    }\n\n    // Compare password\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(400).json({\n        error: 'Incorrect password'\n      });\n    }\n\n    // Generate JWT\n    const token = jwt.sign({\n      id: user.id,\n      role: user.role\n    }, 'your_jwt_secret', {\n      expiresIn: '1h'\n    });\n    res.json({\n      token,\n      user: {\n        id: user.id,\n        email: user.email,\n        role: user.role,\n        name: user.name\n      }\n    });\n  } catch (err) {\n    console.error('Login error:', err);\n    res.status(500).json({\n      error: 'Server error'\n    });\n  }\n});\n\n// Register Route\nrouter.post('/register', async (req, res) => {\n  const {\n    name,\n    email,\n    password,\n    role\n  } = req.body;\n\n  // Validate request body\n  if (!name || !email || !password || !role) {\n    return res.status(400).json({\n      error: 'Name, email, password, and role are required'\n    });\n  }\n  try {\n    // Determine which table to insert into based on role\n    let table;\n    if (role === 'student') table = 'student';else if (role === 'advisor') table = 'advisor';else if (role === 'warden') table = 'warden';else return res.status(400).json({\n      error: 'Invalid role'\n    });\n\n    // Check if user already exists\n    const [existingUsers] = await db.query(`SELECT * FROM ${table} WHERE email = ?`, [email]);\n    if (existingUsers.length > 0) {\n      return res.status(400).json({\n        error: 'User already exists'\n      });\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Insert new user\n    const [result] = await db.query(`INSERT INTO ${table} (name, email, password, role) VALUES (?, ?, ?, ?)`, [name, email, hashedPassword, role]);\n\n    // Generate JWT\n    const token = jwt.sign({\n      id: result.insertId,\n      role\n    }, 'your_jwt_secret', {\n      expiresIn: '1h'\n    });\n    res.json({\n      token,\n      user: {\n        id: result.insertId,\n        email,\n        role,\n        name\n      }\n    });\n  } catch (err) {\n    console.error('Register error:', err);\n    res.status(500).json({\n      error: 'Server error'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","bcrypt","jwt","db","router","Router","post","req","res","email","password","role","body","status","json","error","table","users","query","length","user","isMatch","compare","token","sign","id","expiresIn","name","err","console","existingUsers","hashedPassword","hash","result","insertId","module","exports"],"sources":["/home/vishnu/Documents/hostel-outpass-management (5)/hostel-outpass-management (2)/hostel-outpass-management/hostel-outpass-management/client/src/pages/Warden/Login.jsx"],"sourcesContent":["// server/routes/auth.js\nconst express = require('express');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst db = require('../config/db');\n\nconst router = express.Router();\n\n// Login Route\nrouter.post('/login', async (req, res) => {\n  const { email, password, role } = req.body;\n\n  // Validate request body\n  if (!email || !password || !role) {\n    return res.status(400).json({ error: 'Email, password, and role are required' });\n  }\n\n  try {\n    // Determine which table to query based on role\n    let table;\n    if (role === 'student') table = 'student';\n    else if (role === 'advisor') table = 'advisor';\n    else if (role === 'warden') table = 'warden';\n    else return res.status(400).json({ error: 'Invalid role' });\n\n    // Query the user by email\n    const [users] = await db.query(`SELECT * FROM ${table} WHERE email = ?`, [email]);\n    if (users.length === 0) {\n      return res.status(400).json({ error: 'User not found' });\n    }\n\n    const user = users[0];\n\n    // Check if the role matches\n    if (user.role !== role) {\n      return res.status(400).json({ error: `Role mismatch: expected ${role}, but user is ${user.role}` });\n    }\n\n    // Compare password\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(400).json({ error: 'Incorrect password' });\n    }\n\n    // Generate JWT\n    const token = jwt.sign({ id: user.id, role: user.role }, 'your_jwt_secret', {\n      expiresIn: '1h',\n    });\n\n    res.json({\n      token,\n      user: { id: user.id, email: user.email, role: user.role, name: user.name },\n    });\n  } catch (err) {\n    console.error('Login error:', err);\n    res.status(500).json({ error: 'Server error' });\n  }\n});\n\n// Register Route\nrouter.post('/register', async (req, res) => {\n  const { name, email, password, role } = req.body;\n\n  // Validate request body\n  if (!name || !email || !password || !role) {\n    return res.status(400).json({ error: 'Name, email, password, and role are required' });\n  }\n\n  try {\n    // Determine which table to insert into based on role\n    let table;\n    if (role === 'student') table = 'student';\n    else if (role === 'advisor') table = 'advisor';\n    else if (role === 'warden') table = 'warden';\n    else return res.status(400).json({ error: 'Invalid role' });\n\n    // Check if user already exists\n    const [existingUsers] = await db.query(`SELECT * FROM ${table} WHERE email = ?`, [email]);\n    if (existingUsers.length > 0) {\n      return res.status(400).json({ error: 'User already exists' });\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Insert new user\n    const [result] = await db.query(\n      `INSERT INTO ${table} (name, email, password, role) VALUES (?, ?, ?, ?)`,\n      [name, email, hashedPassword, role]\n    );\n\n    // Generate JWT\n    const token = jwt.sign({ id: result.insertId, role }, 'your_jwt_secret', {\n      expiresIn: '1h',\n    });\n\n    res.json({\n      token,\n      user: { id: result.insertId, email, role, name },\n    });\n  } catch (err) {\n    console.error('Register error:', err);\n    res.status(500).json({ error: 'Server error' });\n  }\n});\n\nmodule.exports = router;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}